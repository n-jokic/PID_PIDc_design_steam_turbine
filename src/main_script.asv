if ~exist('selector', 'var')
    init;
end
close all;
%%
n = 20;
lambda = 0.6;
expansion_point = 0;
Mn = 120;
Ms = 2.5;
H = 1 + Gm/R;

Qpidc = create_symbolic_PIDc(Gt);
Qpid = create_symbolic_PID(Gt, expansion_point, Mn, R);
Qpid_lam = create_symbolic_PID(Gt, 1/lambda, Mn, R);
answer = otPID(Gm, Gp, H, Mn, Ms, 4, 3);
Qpid_opt = answer;
convert_all_to_tf;

%%
close all;
Ms =2;
Q = 1.01;
% zbog necega ne radi u matlabu, optimizacija se radi u Maple...
% Qpid_optf = optPIDf(Ms, Mn, Q, g, gp, p, s, R);
Qpid_optf = (5.91074437036037+(13.0465489036937)/s+(.982867094410579)*s)/((0.819055911877767e-2)*s+1);
(5.91127677590468-(12.9806474634836*I)/w+(.982751397970595*I)*w)/((0.818959498177796e-2*I)*w+1)
f = figure();
f.Name = 'Ms_Mt_pid_optf';
C = Qpid_optf;  
H = 1 + Gm/R;
find_Ms_Mt(Gm, H, C, true);

if SAVE_PLOTS
    save_plots(f, {f.Name}, PATH)
end

disp(Qpid_optf.Numerator)
disp(Qpid_opt.Numerator)

figure, step(-minreal(Gp/(1+Gm*Qpid_opt)))
hold on;
step(-minreal(Gp/(1+Gm*Qpid_optf)), 'k--')


figure, bode(minreal(Gp/(1+Gm*Qpid_opt)))
hold on, bode(minreal(Gp/(1+Gm*Qpid_optf)))


%% Ðœs/Mt: 
f = figure();
f.Name = 'Ms_Mt_pidc';
C = Qpidc;  
find_Ms_Mt(Gm, H, C, true);

if SAVE_PLOTS
    save_plots(f, {f.Name}, PATH)
end

f = figure();
f.Name = 'Ms_Mt_pid';
C = Qpid; 
find_Ms_Mt(Gm, H, C, true);

if SAVE_PLOTS
    save_plots(f, {f.Name}, PATH)
end


f = figure();
f.Name = 'Ms_Mt_pid_lam';
C = Qpid_lam;  
find_Ms_Mt(Gm, H, C, true);

if SAVE_PLOTS
    save_plots(f, {f.Name}, PATH)
end

f = figure();
f.Name = 'Ms_Mt_pid_opt';
C = Qpid_opt;  
H = 1;
find_Ms_Mt(Gm, H, C, true);

if SAVE_PLOTS
    save_plots(f, {f.Name}, PATH)
end



%%
disp('Nominal data: ')
id = 'default';
sigma_n = 0;
t1 = 0.9;
t2 = 5;
run_simulations_and_process_data;

%% robustness: 
disp('Robustness +50%: ')
Tt_normal = Tt;
Tp_normal = Tp;
Tg_normal = Tg;
Kp_normal = Kp;

id = '+50';

scale = 1.5;
Tt = scale*Tt_normal;
Tp = scale*Tp_normal;
Tg = scale*Tg_normal;
Kp = scale*Kp_normal;
run_simulations_and_process_data;

id = '-50';

disp('Robustness -50%: ')
scale = 0.5;
Tt = scale*Tt_normal;
Tp = scale*Tp_normal;
Tg = scale*Tg_normal;
Kp = scale*Kp_normal;
run_simulations_and_process_data;

scale = 1;
Tt = scale*Tt_normal;
Tp = scale*Tp_normal;
Tg = scale*Tg_normal;
Kp = scale*Kp_normal;

%% with noise: 
sigma_n = 0.001;

disp('Noise: ')

id = 'noise';
run_simulations_and_process_data;
